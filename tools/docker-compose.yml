version: '3.9'

# --------------------------------- Networks --------------------------------- #
networks:
  proxy:
    external:
      name: proxy
  socket_proxy:
    external:
      name: socket_proxy
  apps:
    external:
      name: apps
  default:
    driver: bridge

services:
  # ---------------------------------------------------------------------------- #
  #                                   Portainer                                  #
  # ---------------------------------------------------------------------------- #
  portainer:
    container_name: 'portainer'
    image: 'portainer/portainer-ce:latest'
    restart: 'unless-stopped'
    networks:
      - 'proxy'
      - 'socket_proxy'
      - 'apps'
    security_opt:
      - 'no-new-privileges:true'
    volumes:
      - '$DOCKERDIR/portainer/data:/data'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - '/:/host'
    environment:
      - 'TZ=$TZ'
    labels:
      traefik.docker.network: 'proxy'
      traefik.enable: 'true'
      traefik.http.routers.portainer.entrypoints: 'websecure'
      traefik.http.routers.portainer.rule: 'Host(`portainer.$DOMAINNAME`)'
      traefik.http.routers.portainer.service: 'portainer-svc'
      traefik.http.routers.portainer.tls: 'true'
      traefik.http.routers.portainer.tls.certresolver: 'wildcard-cloudflare'
      traefik.http.services.portainer-svc.loadbalancer.server.port: '9000'

  # ---------------------------------------------------------------------------- #
  #                         Glances - System Information                         #
  # ---------------------------------------------------------------------------- #
  glances:
    container_name: 'glances'
    image: 'jdreinhardt/glances:release'
    restart: 'unless-stopped'
    networks:
      - 'proxy'
      - 'socket_proxy'
      - 'apps'
    security_opt:
      - 'no-new-privileges:true'
    environment:
      DOCKER_HOST: 'tcp://socket-proxy:2375'
      GLANCES_OPT: '-w'
    labels:
      traefik.docker.network: 'proxy'
      traefik.enable: 'true'
      traefik.http.routers.glances.entrypoints: 'websecure'
      traefik.http.routers.glances.rule: 'Host(`glances.$DOMAINNAME`)'
      traefik.http.routers.glances.service: 'glances-svc'
      traefik.http.routers.glances.tls: 'true'
      traefik.http.routers.glances.tls.certresolver: 'wildcard-cloudflare'
      traefik.http.services.glances-svc.loadbalancer.server.port: '61208'
    pid: 'host'
    privileged: true

  # ---------------------------------------------------------------------------- #
  #                     Dozzle - Real-time Docker Log Viewer                     #
  # ---------------------------------------------------------------------------- #
  dozzle:
    container_name: 'dozzle'
    image: 'amir20/dozzle:latest'
    restart: 'unless-stopped'
    networks:
      - 'proxy'
      - 'socket_proxy'
      - 'apps'
    security_opt:
      - 'no-new-privileges:true'
    environment:
      DOCKER_HOST: 'tcp://socket-proxy:2375'
      DOZZLE_FILTER: 'status=running'
      DOZZLE_LEVEL: 'info'
      DOZZLE_TAILSIZE: 300
    labels:
      traefik.enable: 'true'
      traefik.http.routers.dozzle.entrypoints: 'websecure'
      traefik.http.routers.dozzle.rule: 'Host(`dozzle.$DOMAINNAME`)'
      traefik.http.routers.dozzle.service: 'dozzle-svc'
      traefik.http.routers.dozzle.tls: 'true'
      traefik.http.routers.dozzle.tls.certresolver: 'wildcard-cloudflare'
      traefik.http.services.dozzle-svc.loadbalancer.server.port: '8080'

  # ---------------------------------------------------------------------------- #
  #                                   Cadvisor                                   #
  # ---------------------------------------------------------------------------- #
  # Collects information and metrics on all the containers running in the host system

  # cadvisor:
  #   image: michbeck100/cadvisor
  #   container_name: cadvisor
  #   command: --raw_cgroup_prefix_whitelist=/docker/ --disable_metrics=hugetlb
  #   build:
  #     context: .
  #   privileged: true
  #   volumes:
  #     - '/:/rootfs:ro'
  #     - '/var/run:/var/run:ro'
  #     - '/sys:/sys:ro'
  #     - '/var/lib/docker/:/var/lib/docker:ro'
  #     - '/dev/disk/:/dev/disk:ro'
  #   devices:
  #     - '/dev/kmsg:/dev/kmsg'
  #   restart: unless-stopped



  # ---------------------------------------------------------------------------- #
  #                                  Prometheus                                  #
  # ---------------------------------------------------------------------------- #
  influxdb:
    container_name: 'influxdb'
    hostname: 'influxdb'
    dns:
      8.8.8.8
    image: 'influxdb:latest'
    restart: 'unless-stopped'
    ports:
      - '8086:8086'
    networks:
      - 'apps'
      - 'proxy'
    volumes:
      - '$DOCKERDIR/influxdb/data:/var/lib/influxdb2:rw'
      - '$DOCKERDIR/influxdb/condif:/etc/influxdb2'
      - '/etc/timezone:/etc/timezone:ro'
      - '/etc/localtime:/etc/localtime:ro'
    environment:
      INFLUXDB_HTTP_AUTH_ENABLED: 'true'
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: $INFLUXDB_USERNAME
      DOCKER_INFLUXDB_INIT_PASSWORD: $INFLUXDB_PASSWORD
      DOCKER_INFLUXDB_INIT_ORG: $INFLUXDB_ORG
      DOCKER_INFLUXDB_INIT_BUCKET: $INFLUXDB_DEFAULT_DB
      DOCKER_INFLUXDB_INIT_RETENTION: 1w
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: $INFLUXDB_ADMIN_TOKEN
    labels:
      traefik.enable: 'true'
      traefik.http.routers.influxdb.entrypoints: 'websecure'
      traefik.http.routers.influxdb.rule: 'Host(`influxdb.$DOMAINNAME`)'
      traefik.http.routers.influxdb.service: 'influxdb-svc'
      traefik.http.routers.influxdb.tls: 'true'
      traefik.http.routers.influxdb.tls.certresolver: 'wildcard-cloudflare'
      traefik.http.services.influxdb-svc.loadbalancer.server.port: '8086'

  telegraf:
    container_name: 'telegraf'
    image: 'telegraf:latest'
    pid: "host"
    dns:
      10.1.0.9
    networks:
    - 'apps'
    - 'socket_proxy'
    - 'proxy'
    ports:
      - '8125:8125/udp'
      - "8092:8092"
      - "8094:8094"
      - "8125:8125"
    volumes:
      - '$DOCKERDIR/telegraf/etc/telegraf.conf:/etc/telegraf/telegraf.conf:ro'
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/host/sys:ro
      - /proc:/host/proc:ro
      - /etc:/host/etc:ro
    depends_on:
      - 'influxdb'
    links:
      - 'influxdb'
    environment:
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_DEFAULT_DB}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
      - HOST_PROC=/host/proc
      - HOST_SYS=/host/sys
      - HOST_ETC=/host/etc

  prometheus:
    container_name: 'prometheus'
    image: 'prom/prometheus:latest'
    # restart: 'unless-stopped'
    ports:
      - '9090:9090'
    networks:
      - 'apps'
      - 'proxy'
    volumes:
      - '$DOCKERDIR/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro'
      - '$DOCKERDIR/prometheus/data:/data'
    environment:
      - 'TZ=$TZ'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/data'
    user: 'root'




  # ---------------------------------------------------------------------------- #
  #                                    Grafana                                   #
  # ---------------------------------------------------------------------------- #
  grafana:
    container_name: 'grafana'
    dns:
      - 8.8.8.8
    image: 'grafana/grafana:latest'
    restart: 'unless-stopped'
    ports:
      - "3001:3000"
    networks:
      - 'proxy'
      - 'apps'
    security_opt:
      - 'no-new-privileges:true'
    volumes:
      - '$DOCKERDIR/grafana:/var/lib/grafana'
      - '$DOCKERDIR/grafana/grafana.ini:/etc/grafana/grafana.ini'
      - '$DOCKERDIR/grafana/provisioning:/etc/grafana/provisioning'
    environment:
      GF_INSTALL_PLUGINS: 'grafana-piechart-panel'
    labels:
      traefik.docker.network: 'proxy'
      traefik.enable: 'true'
      traefik.http.routers.grafana.entrypoints: 'websecure'
      traefik.http.routers.grafana.rule: 'Host(`grafana.$DOMAINNAME`)'
      traefik.http.routers.grafana.service: 'grafana-svc'
      traefik.http.routers.grafana.tls: 'true'
      traefik.http.routers.grafana.tls.certresolver: 'wildcard-cloudflare'
      traefik.http.services.grafana-svc.loadbalancer.server.port: '3000'
    user: '0'
