version: '3.9'

# --------------------------------- Networks --------------------------------- #
networks:
  proxy:
    external:
      name: proxy
  # socket_proxy:
  #   external:
  #     name: socket_proxy
  apps:
    external:
      name: apps
  default:
    driver: bridge

services:
  # ---------------------------------------------------------------------------- #
  #                                   Node-Red                                   #
  # ---------------------------------------------------------------------------- #
  node-red:
    container_name: 'nodered'
    image: 'nodered/node-red:latest'
    restart: 'unless-stopped'
    dns: '1.1.1.1'
    ports:
      - '1880:1880'
    networks:
      - 'proxy'
      - 'apps'
    volumes:
      - '$DOCKERDIR/node-red/data:/data'
      - '$DOCKERDIR/node-red/.ssh:/usr/src/node-red/.ssh'
    extra_hosts:
      host.docker.internal: 'host-gateway'
    environment:
      - 'TZ=${TZ}'
    labels:
      info: '(:1880)'
      traefik.enable: 'true'
      traefik.http.routers.nodered.entrypoints: 'websecure'
      traefik.http.routers.nodered.rule: 'Host(`nodered.${DOMAINNAME}`)'
      traefik.http.routers.nodered.tls: 'true'
      traefik.http.routers.nodered.tls.certresolver: 'wildcard-cloudflare'

  # ---------------------------------------------------------------------------- #
  #                                 Transmission                                 #
  # ---------------------------------------------------------------------------- #
  # transmission:
  #   container_name: 'transmission'
  #   image: 'lscr.io/linuxserver/transmission'
  #   ports:
  #     - '9091:9091'
  #     - '51413:51413'
  #     - '51413:51413/udp'
  #   networks:
  #     - 'proxy'
  #     - 'apps'
  #   volumes:
  #     - '$DOCKERDIR/transmission/config:/config'
  #     - '${EXT_MOUNT_POINT}/Torrents:/downloads'
  #     - '${EXT_MOUNT_POINT}/Server/Watch:/watch'
  #   restart: 'unless-stopped'
  #   environment:
  #     - 'PUID=1000'
  #     - 'PGID=1000'
  #     - 'TZ=${TZ}'
  #     - 'TRANSMISSION_WEB_HOME=/combustion-release/'
  #     - 'VIRTUAL_HOST=transmission.local'
  #     - 'VIRTUAL_PORT=9091'
  #   labels:
  #     info: '(:9091)'
  #     traefik.enable: 'true'
  #     traefik.http.routers.transmission.entrypoints: 'websecure'
  #     traefik.http.routers.transmission.rule: 'Host(`transmission.${DOMAINNAME}`)'
  #     traefik.http.routers.transmission.tls: 'true'
  #     traefik.http.routers.transmission.tls.certresolver: 'wildcard-cloudflare'

  # ---------------------------------------------------------------------------- #
  #                                     Plex                                     #
  # ---------------------------------------------------------------------------- #
  # plex:
  #   container_name: 'plex'
  #   image: 'lscr.io/linuxserver/plex'
  #   restart: 'unless-stopped'
  #   dns:
  #     - '8.8.8.8'
  #   ports:
  #     - '32400:32400'
  #     - '1901:1900/udp'
  #     - '3005:3005'
  #     - '5353/udp'
  #     - '8324:8324'
  #     - '32410:32410/udp'
  #     - '32412:32412/udp'
  #     - '32413:32413/udp'
  #     - '32414:32414/udp'
  #     - '32469:32469'
  #   networks:
  #     - 'apps'
  #     - 'proxy'
  #   volumes:
  #     - '$DOCKERDIR/plex/config:/config'
  #     - '${EXT_MOUNT_POINT}/Server/Music:/music'
  #     - '${EXT_MOUNT_POINT}/Server/TV series:/tv'
  #     - '${EXT_MOUNT_POINT}/Server/Movies:/movies'
  #     - '${EXT_MOUNT_POINT}/Server/Audiobooks:/audiobooks'
  #     - '${EXT_MOUNT_POINT}/Server/Other:/other'
  #     - '${EXT_MOUNT_POINT}/Torrents/complete:/new_dl'
  #   environment:
  #     - 'PUID=1000'
  #     - 'PGID=1000'
  #     - 'VERSION=docker'
  #     - 'PLEX_CLAIM=${PLEX_CLAIM}'
  #     - 'ADVERTISE_IP="http://${SERVER_IP}:32400"'
  #     - 'HOSTNAME=PiPlex'
  #   labels:
  #     info: '(:32400)'
  #     traefik.enable: 'true'
  #     traefik.http.middlewares.to_plex_ip.redirectregex.regex: '^https?://plex\.${DOMAINNAME}/(.*)'
  #     traefik.http.middlewares.to_plex_ip.redirectregex.replacement: 'http://${SERVER_IP}:32400/$$1'
  #     traefik.http.routers.plex.entrypoints: 'websecure'
  #     traefik.http.routers.plex.middlewares: 'to_plex_ip'
  #     traefik.http.routers.plex.rule: 'Host(`plex.${DOMAINNAME}`)'
  #     traefik.http.routers.plex.service: 'noop@internal'
  #     traefik.http.routers.plex.tls: 'true'
  #     traefik.http.routers.plex.tls.certresolver: 'wildcard-cloudflare'

  jellyfin:
    image: lscr.io/linuxserver/jellyfin
    container_name: jellyfin
    dns:
      1.1.1.1
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=$TZ
      - JELLYFIN_PublishedServerUrl=10.1.0.9 #optional
    volumes:
      - '${EXT_MOUNT_POINT}/Server/jellyfin/config:/config'
      - '${EXT_MOUNT_POINT}/Server/TV series:/data/tvshows'
      - '${EXT_MOUNT_POINT}/Server/Movies:/data/movies'
      - '${EXT_MOUNT_POINT}/Server/Music:/data/music'
      - '${EXT_MOUNT_POINT}/Server/Audiobooks:/data/audiobooks'
      - '${EXT_MOUNT_POINT}/Server/Other:/data/other'
      - '${EXT_MOUNT_POINT}/Torrents/complete:/data/new_dl'
    networks:
      - 'apps'
      - 'proxy'
    ports:
      - 8096:8096
      # - 8920:8920 #optional
      - 7359:7359/udp #optional
      - 1902:1900/udp #optional
    restart: unless-stopped
    labels:
      traefik.enable: 'true'
      traefik.http.routers.jellyfin.entrypoints: 'websecure'
      traefik.http.routers.jellyfin.rule: 'Host(`jellyfin.${DOMAINNAME}`)'
      traefik.http.routers.jellyfin.tls: 'true'
      traefik.http.routers.jellyfin.service: 'jellyfin-svc'
      traefik.http.routers.jellyfin.tls.certresolver: 'wildcard-cloudflare'
      traefik.http.services.jellyfin-svc.loadbalancer.server.port: '8096'



  # ---------------------------------------------------------------------------- #
  #                               Whoami (http test)                              #
  # ---------------------------------------------------------------------------- #
  # whoami:
  #   container_name: 'whoami'
  #   image: 'traefik/whoami'
  #   ports:
  #     - 80
  #   networks:
  #     - 'apps'
  #     - 'proxy'
  #   labels:
  #     traefik.enable: 'true'
  #     traefik.http.routers.whoami.entrypoints: 'websecure'
  #     traefik.http.routers.whoami.rule: 'Host(`whoami.${DOMAINNAME}`)'
  #     traefik.http.routers.whoami.tls: 'true'
  #     traefik.http.routers.whoami.tls.certresolver: 'wildcard-cloudflare'

  # code-server:
  #   container_name: 'code-server'
  #   dns:
  #     - 1.1.1.1
  #   image: 'lscr.io/linuxserver/code-server'
  #   restart: 'unless-stopped'
  #   ports:
  #     - '8443:8443'
  #   networks:
  #     - 'apps'
  #     - 'proxy'
  #   volumes:
  #     - '/home/pi/Docker:/Docker'
  #     - $DOCKERDIR/codeserver/config:/config
  #   environment:
  #     - 'PUID=1000'
  #     - 'PGID=1000'
  #     - 'TZ=$TZ'
  #     - 'PROXY_DOMAIN=code.$DOMAINNAME'
  #     - 'DEFAULT_WORKSPACE=/Docker'
  #   labels:
  #     traefik.enable: 'true'
  #     traefik.http.routers.codeserver.entrypoints: 'websecure'
  #     traefik.http.routers.codeserver.rule: 'Host(`code.$DOMAINNAME`)'
  #     traefik.http.routers.codeserver.service: 'codeserver-svc'
  #     traefik.http.routers.codeserver.tls: 'true'
  #     traefik.http.routers.codeserver.tls.certresolver: 'wildcard-cloudflare'
  #     traefik.http.services.codeserver-svc.loadbalancer.server.port: '8443'


  # ---------------------------------------------------------------------------- #
  #                           MQTT - Zigbee controller                           #
  # ---------------------------------------------------------------------------- #
  mqtt:
    container_name: 'mosquitto'
    image: 'eclipse-mosquitto:2.0'
    restart: 'unless-stopped'
    ports:
      - '1883:1883'
      - '9001:9001'
    networks:
      - 'proxy'
      - 'apps'
    # volumes:
    #   - '$DOCKERDIR/mosquitto-data:/mosquitto:rw'
    environment:
    - MOSQUITTO_USERNAME=hannes
    - MOSQUITTO_PASSWORD=lisalisa123
    volumes:
      - $DOCKERDIR/mosquitto/config:/mosquitto/config
      - $DOCKERDIR/mosquitto/data:/mosquitto/data
      - $DOCKERDIR/mosquitto/log:/mosquitto/log
    # command: 'mosquitto -c /mosquitto-no-auth.conf'

  zigbee2mqtt:
    container_name: 'zigbee2mqtt'
    dns: 1.1.1.1
    image: 'koenkk/zigbee2mqtt'
    restart: 'unless-stopped'
    ports:
      - '8095:8080'
    networks:
      - 'proxy'
      - 'apps'
    volumes:
      - '$DOCKERDIR/zigbee2mqtt-data:/app/data'
      - '/run/udev:/run/udev:ro'
    devices:
      - '/dev/ttyACM0'
    environment:
      - 'TZ=$TZ'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.z2m.entrypoints: 'websecure'
      traefik.http.routers.z2m.rule: 'Host(`z2m.$DOMAINNAME`)'
      traefik.http.routers.z2m.service: 'z2m-svc'
      traefik.http.routers.z2m.tls: 'true'
      traefik.http.routers.z2m.tls.certresolver: 'wildcard-cloudflare'
      traefik.http.services.z2m-svc.loadbalancer.server.port: '8080'

  homeassistant:
    container_name: 'homeassistant'
    dns: 1.1.1.1
    image: 'ghcr.io/home-assistant/home-assistant:stable'
    restart: 'unless-stopped'
    volumes:
      - '$DOCKERDIR/homeassistant/config:/config'
      - '/etc/localtime:/etc/localtime:ro'
      - /var/run/docker.sock:/var/run/docker.sock
    # devices:
      # - '/dev/ttyACM0'
      # - '/dev/ttyAMA0:/dev/ttyAMA0'
    network_mode: 'host'
    privileged: true
    environment:
      - TZ=$TZ

  #   labels:
  #     traefik.enable: 'true'
  #     traefik.http.middlewares.to_hass_ip.redirectregex.regex: '^https?://hass\.${DOMAINNAME}/(.*)'
  #     traefik.http.middlewares.to_hass_ip.redirectregex.replacement: 'http://${SERVER_IP}:8123/$$1'
  #     traefik.http.routers.hass.entrypoints: 'websecure'
  #     traefik.http.routers.hass.middlewares: 'to_hass_ip'
  #     traefik.http.routers.hass.rule: 'Host(`hass.${DOMAINNAME}`)'
  #     traefik.http.routers.hass.service: 'noop@internal'
  #     traefik.http.routers.hass.tls: 'true'
  #     traefik.http.routers.hass.tls.certresolver: 'wildcard-cloudflare'

    # user: '1000:1000'
    # labels:
    #   traefik.enable: 'true'
    #   traefik.http.routers.homeassistant.entrypoints: 'websecure'
    #   traefik.http.routers.homeassistant.rule: 'Host(`hass.$DOMAINNAME`)'
    #   traefik.http.routers.homeassistant.service: 'homeassistant-svc'
    #   traefik.http.routers.homeassistant.tls: 'true'
    #   traefik.http.routers.homeassistant.tls.certresolver: 'wildcard-cloudflare'
    #   traefik.http.services.homeassistant-svc.loadbalancer.server.port: '8123'

  # ---------------------------------------------------------------------------- #
  #                                  Homebridge                                  #
  # ---------------------------------------------------------------------------- #
  # homebridge:
  #   container_name: homebridge
  #   image: oznu/homebridge:ubuntu
  #   restart: always
  #   network_mode: host # Port: 8581
  #   environment:
  #     - PGID=1000
  #     - PUID=1000
  #     - HOMEBRIDGE_CONFIG_UI=1
  #     - HOMEBRIDGE_CONFIG_UI_PORT=8581
  #     - TZ=${TZ}
  #   volumes:
  #     - $DOCKERDIR/homebridge/volumes/homebridge:/homebridge

  # Box 64


  # ---------------------------------------------------------------------------- #
  #                    OpenspeedtestLocal - speedtest for LAN                    #
  # ---------------------------------------------------------------------------- #
  # openspeedtest:
  #   container_name: 'openspeedtest'
  #   image: 'openspeedtest/latest'
  #   restart: 'unless-stopped'
  #   ports:
  #     - '8081:8080'
  #   networks:
  #     - 'proxy'
  #     - 'apps'
  #   environment:
  #     TZ: '$TZ'
  #   labels:
  #     traefik.enable: 'true'
  #     traefik.http.routers.openspeedtest.entrypoints: 'websecure'
  #     traefik.http.routers.openspeedtest.rule: 'Host(`speedtest.$DOMAINNAME`)'
  #     traefik.http.routers.openspeedtest.service: 'openspeedtest-svc'
  #     traefik.http.routers.openspeedtest.tls: 'true'
  #     traefik.http.routers.openspeedtest.tls.certresolver: 'wildcard-cloudflare'
  #     traefik.http.services.openspeedtest-svc.loadbalancer.server.port: '8080'
