version: '3.7'
services:
  # ---------------------------------------------------------------------------- #
  #                                    Traefik                                   #
  # ---------------------------------------------------------------------------- #
  traefik:
    image: "traefik:v2.6"
    container_name: "traefik"
    dns:
    - 8.8.8.8
    command:
    - "--api.dashboard=true"
    - "--api.insecure=true"
    - "--providers.docker=true"
    - "--entrypoints.web.address=:80"
    - "--entrypoints.websecure.address=:443"
    - "--providers.docker.exposedbydefault=false"
    # - --providers.docker.defaultrule=HostHeader(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
    - "--pilot.token=$PILOT_TOKEN"

    - --providers.docker.network=proxy
    - --accessLog=true
    - --accessLog.filePath=/traefik.log
    - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
    - --accessLog.filters.statusCodes=400-599


    - --certificatesresolvers.wildcard-cloudflare.acme.dnschallenge=true
    - --certificatesResolvers.wildcard-cloudflare.acme.dnsChallenge.provider=cloudflare
    # - --certificatesResolvers.wildcard-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    - --certificatesResolvers.wildcard-cloudflare.acme.dnsChallenge.disablepropagationcheck=true
    - --certificatesresolvers.wildcard-cloudflare.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
    - --certificatesResolvers.wildcard-cloudflare.acme.dnsChallenge.delayBeforeCheck=10
    - --certificatesresolvers.wildcard-cloudflare.acme.email=${CF_API_EMAIL}
    - --certificatesresolvers.wildcard-cloudflare.acme.storage=/tls-certificates/acme.json
    environment:
      CF_API_EMAIL: ${CF_API_EMAIL}
      CF_API_KEY: ${CF_API_KEY}
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - socket_proxy
      - proxy
      - apps
    volumes:
      - ./traefik/traefik.log:/traefik.log
      - ./traefik/tls-certificates:/tls-certificates
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.service: "api@internal"
      traefik.http.routers.traefik.entrypoints: "websecure"
      traefik.http.routers.traefik.rule: "Host(`traefik.${DOMAINNAME}`)"
      traefik.http.routers.traefik.tls: "true"
      traefik.http.routers.traefik.tls.certresolver: "wildcard-cloudflare"
      traefik.http.routers.traefik.tls.domains[0].main: "${DOMAINNAME}"
      traefik.http.routers.traefik.tls.domains[0].sans: "*.${DOMAINNAME}"

  # ---------------------------------------------------------------------------- #
  #                                   Node-Red                                   #
  # ---------------------------------------------------------------------------- #
  node-red:
    container_name: nodered
    image: nodered/node-red:latest
    environment:
      - TZ=${TZ}
    ports:
      - "1880:1880"
    networks:
      - proxy
      - apps
    volumes:
      - ./node-red/data:/data
      - ./node-red/.ssh:/usr/src/node-red/.ssh # Need ssh keys here
    extra_hosts:
      host.docker.internal: host-gateway
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.nodered.rule: "Host(`nodered.${DOMAINNAME}`)"
      traefik.http.routers.nodered.entrypoints: "websecure"
      traefik.http.routers.nodered.tls: "true"
      traefik.http.routers.nodered.tls.certresolver: "wildcard-cloudflare"

  # ---------------------------------------------------------------------------- #
  #                                 Transmission                                 #
  # ---------------------------------------------------------------------------- #
  transmission:
    image: lscr.io/linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - TRANSMISSION_WEB_HOME=/combustion-release/ #optional
      - VIRTUAL_HOST=transmission.local
      - VIRTUAL_PORT=9091
      # - WHITELIST=iplist #optional
      # - PEERPORT=peerport #optional
      # - HOST_WHITELIST=dnsnane list #optional
    networks:
      - proxy
      - apps
    volumes:
      - ./transmission/config:/config
      - ${EXT_MOUNT_POINT}/Torrents:/downloads
      - ${EXT_MOUNT_POINT}/Server/Watch:/watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.transmission.rule: "Host(`transmission.${DOMAINNAME}`)"
      traefik.http.routers.transmission.entrypoints: "websecure"
      traefik.http.routers.transmission.tls: "true"
      traefik.http.routers.transmission.tls.certresolver: "wildcard-cloudflare"

  # ---------------------------------------------------------------------------- #
  #                                  Homebridge                                  #
  # ---------------------------------------------------------------------------- #
  # homebridge:
  #   container_name: homebridge
  #   image: oznu/homebridge:ubuntu
  #   restart: always
  #   network_mode: host # Port: 8581
  #   environment:
  #     - PGID=1000
  #     - PUID=1000
  #     - HOMEBRIDGE_CONFIG_UI=1
  #     - HOMEBRIDGE_CONFIG_UI_PORT=8581
  #     - TZ=${TZ}
  #   volumes:
  #     - ./homebridge/volumes/homebridge:/homebridge

  # ---------------------------------------------------------------------------- #
  #                               Pi-Hole & Unbound                              #
  # ---------------------------------------------------------------------------- #
  unbound:
    container_name: unbound
    image: klutchell/unbound
    # dns:
    #   - 1.1.1.1
    # command:
    #   - --health-cmd "dig sigok.verteiltesysteme.net @127.0.0.1"
    # healthcheck:
    #   test: dig sigok.verteiltesysteme.net @127.0.0.1 +dnssec | grep NOERROR
    restart: unless-stopped
    volumes:
      - ./unbound/unbound.conf:/etc/unbound/unbound.conf
      - ./unbound/a-records.conf:/etc/unbound/a-records.conf
    networks:
      apps:
        ipv4_address: 10.0.92.22

      # pihole_net:
      #   ipv4_address: 10.0.0.2

  pihole:
    container_name: pihole
    depends_on: [unbound]
    image: pihole/pihole:latest
    # links:
    # - unbound
    # dns: 127.0.0.1:5053
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "81:80/tcp"
    environment:
      TZ: '${TZ}'
      # Unbound IP
      DNS1: 10.0.92.22#53
      DNS2: 10.0.92.22#53
      IPv6: "no"
      PROXY_LOCATION: pihole
      VIRTUAL_HOST: pihole.${DOMAINNAME}
    #   DNSMASQ_LISTENING: all
      WEBPASSWORD: ${PIHOLE_PW}
    dns:
    - 127.0.0.1
    - 10.0.92.22:53 # Points to unbound
    volumes:
      - './pi-hole/etc-pihole:/etc/pihole'
      - './pi-hole/etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN
    restart: unless-stopped # Recommended but not required (DHCP needs NET_ADMIN)
    networks:
      proxy:
      apps:
        # ipv4_address: 10.0.92.3
      # pihole_net:
      #   ipv4_address: 10.0.0.3
    labels:
      traefik.enable: "true"
      traefik.http.routers.pihole.rule: "Host(`pihole.${DOMAINNAME}`)"
      traefik.http.routers.pihole.entrypoints: "websecure"
      traefik.http.routers.pihole.tls: "true"
      traefik.http.routers.pihole.tls.certresolver: "wildcard-cloudflare"
      traefik.http.services.pihole.loadBalancer.server.port: "80"

      # traefik.http.routers.pihole.service: "pihole"

  # ---------------------------------------------------------------------------- #
  #                                     Plex                                     #
  # ---------------------------------------------------------------------------- #
  plex:
    image: lscr.io/linuxserver/plex
    container_name: plex
    dns:
    - 8.8.8.8
    # network_mode: host # Port: 32400
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM} # Expires
      - ADVERTISE_IP="http://${SERVER_IP}:32400"
      - HOSTNAME=PiPlex
    networks:
      - apps
      - proxy
    volumes:
      - ./plex/config:/config
      - ${EXT_MOUNT_POINT}/Server/Music:/music
      - ${EXT_MOUNT_POINT}/Server/TV series:/tv
      - ${EXT_MOUNT_POINT}/Server/Movies:/movies
      - ${EXT_MOUNT_POINT}/Server/Audiobooks:/audiobooks
      - ${EXT_MOUNT_POINT}/Server/Other:/other
      - ${EXT_MOUNT_POINT}/Torrents/complete:/new_dl
    ports:
      - 32400:32400
      - 1900:1900/udp
      - 3005:3005
      - 5353/udp
      - 8324:8324
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
      - 32469:32469
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.plex.rule: "Host(`plex.${DOMAINNAME}`)"
      # traefik.http.services.plex.loadbalancer.server.port: 32400
      traefik.http.routers.plex.entrypoints: "websecure"
      traefik.http.routers.plex.tls: "true"
      traefik.http.routers.plex.tls.certresolver: "wildcard-cloudflare"

      # Redirect to ip to circumvent plex ownership issues
      traefik.http.routers.plex.service: noop@internal
      traefik.http.routers.plex.middlewares: to_plex_ip
      traefik.http.middlewares.to_plex_ip.redirectregex.regex: ^https?://plex\.${DOMAINNAME}/(.*)
      traefik.http.middlewares.to_plex_ip.redirectregex.replacement: http://${SERVER_IP}:32400/$$1

  # ---------------------------------------------------------------------------- #
  #                               Whoami (http test)                              #
  # ---------------------------------------------------------------------------- #
  whoami:
    image: traefik/whoami
    container_name: "whoami"
    networks:
      - apps
      - proxy
    labels:
      traefik.enable: "true"
      traefik.http.routers.whoami.rule: "Host(`whoami.${DOMAINNAME}`)"
      traefik.http.routers.whoami.entrypoints: "websecure"
      traefik.http.routers.whoami.tls: "true"
      traefik.http.routers.whoami.tls.certresolver: "wildcard-cloudflare"

  # ---------------------------------------------------------------------------- #
  #                                   Wireguard                                  #
  # ---------------------------------------------------------------------------- #
  wireguard:
    image: linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      # - SERVERURL=wireguard.domain.com #optional
      - SERVERPORT=51820 #optional
      - PEERS=1 #optional
      - PEERDNS=auto #optional
      # - INTERNAL_SUBNET=10.13.13.0 #optional
    volumes:
      - ./wireguard/config:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

  # openvpn-client

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    networks:
      - proxy
      - socket_proxy
      - apps
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./portainer/data:/data # Change to local directory if you want to save/transfer config locally
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/host

    environment:
      - TZ=$TZ
    labels:
      traefik.enable: "true"
      traefik.docker.network: "proxy"
      ## HTTP Routers
      traefik.http.routers.portainer.entrypoints: "websecure"
      traefik.http.routers.portainer.tls: "true"

      traefik.http.routers.portainer.rule: "Host(`portainer.$DOMAINNAME`)"
      ## HTTP Services
      traefik.http.routers.portainer.service: "portainer-svc"
      traefik.http.services.portainer-svc.loadbalancer.server.port: "9000"


# # --------------------------------- Networks --------------------------------- #
networks:
  proxy:
    external:
      name: proxy
  socket_proxy:
    external:
      name: socket_proxy
  apps:
    external:
      name: apps
  default:
    driver: bridge

