version: '3.7'
services:
  # ---------------------------------------------------------------------------- #
  #                                   Node-Red                                   #
  # ---------------------------------------------------------------------------- #
  node-red:
    container_name: nodered
    image: nodered/node-red:latest
    environment:
      - TZ=Europe/Stockholm
    ports:
      - "1880:1880"
    volumes:
      - ./node-red/data:/data
      - ./node-red/.ssh:/usr/src/node-red/.ssh # Need ssh keys here
    extra_hosts:
      host.docker.internal: host-gateway
    restart: unless-stopped
    labels:
    - "traefik.enable=true"

  # ---------------------------------------------------------------------------- #
  #                                 Transmission                                 #
  # ---------------------------------------------------------------------------- #
  transmission:
    image: lscr.io/linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Stockholm
      - TRANSMISSION_WEB_HOME=/combustion-release/ #optional
      - VIRTUAL_HOST=transmission.local
      - VIRTUAL_PORT=9091
      # - WHITELIST=iplist #optional
      # - PEERPORT=peerport #optional
      # - HOST_WHITELIST=dnsnane list #optional
    volumes:
      - ./transmission/config:/config
      - /mnt/usb/Torrents:/downloads
      - /mnt/usb/Server/Watch:/watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
    labels:
    - "traefik.enable=true"

  # ---------------------------------------------------------------------------- #
  #                                  Homebridge                                  #
  # ---------------------------------------------------------------------------- #
  # homebridge:
  #   container_name: homebridge
  #   image: oznu/homebridge:ubuntu
  #   restart: always
  #   network_mode: host # Port: 8581
  #   environment:
  #     - PGID=1000
  #     - PUID=1000
  #     - HOMEBRIDGE_CONFIG_UI=1
  #     - HOMEBRIDGE_CONFIG_UI_PORT=8581
  #     - TZ=Europe/Stockholm
  #   volumes:
  #     - ./homebridge/volumes/homebridge:/homebridge

  # ---------------------------------------------------------------------------- #
  #                                    Pi-Hole                                   #
  # ---------------------------------------------------------------------------- #
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "81:80/tcp"
    environment:
      TZ: 'Europe/Stockholm'
      # WEBPASSWORD: 'set a secure password here or it will be random'
    # Volumes store your data between container upgrades
    volumes:
      - './pi-hole/etc-pihole:/etc/pihole'
      - './pi-hole/etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN
    restart: unless-stopped # Recommended but not required (DHCP needs NET_ADMIN)
    labels:
    - 'traefik.enable=true'
    - 'traefik.http.routers.pihole.rule=Host(`pihole.${DOMAINNAME}`)'
    - 'traefik.http.routers.pihole.entrypoints=web-secure'
    - 'traefik.http.routers.pihole.tls=true'
    - "traefik.http.routers.pihole.tls.certresolver=certificato"
    - "traefik.http.routers.pihole.tls.domains[0].main=*.${DOMAINNAME}"
    - "traefik.http.routers.pihole.service=pihole"
    - "traefik.http.services.piholeService.loadBalancer.server.port=80"

  # ---------------------------------------------------------------------------- #
  #                                     Plex                                     #
  # ---------------------------------------------------------------------------- #
  plex:
    image: lscr.io/linuxserver/plex
    container_name: plex
    network_mode: host # Port: 32400
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
      - PLEX_CLAIM=claim-Lwd_4B5E2yBV2hc-Gvxc #optional
    volumes:
      - ./plex/config:/config
      - /mnt/usb/Server/Music:/music
      - /mnt/usb/Server/TV series:/tv
      - /mnt/usb/Server/Movies:/movies
      - /mnt/usb/Server/Audiobooks:/audiobooks
      - /mnt/usb/Server/Other:/other
      - /mnt/usb/Torrents/complete:/new_dl

    restart: unless-stopped



  # ---------------------------------------------------------------------------- #
  #                               Hello (http test)                              #
  # ---------------------------------------------------------------------------- #
  hello:
    image: nginxdemos/hello
    container_name: hello
    # ports:
    #   - "8081:80"
    labels:
    - "traefik.enable=true"
    # - "traefik.http.routers.hello.entrypoints=web"
    # - "traefik.http.routers.hello.rule=Host(`hello.$DOMAINNAME`)"



  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    labels:
    - 'traefik.enable=true'
    - 'traefik.http.routers.whoami.rule=Host(`whoami.${DOMAINNAME}`)'
    - 'traefik.http.routers.whoami.entrypoints=web-secure'
    - 'traefik.http.routers.whoami.tls=true'
    - "traefik.http.routers.whoami.tls.certresolver=certificato"
    - "traefik.http.routers.whoami.tls.domains[0].main=*.${DOMAINNAME}"
    - "traefik.http.services.whoami.loadBalancer.server.port=80"

  # ---------------------------------------------------------------------------- #
  #                                    Traefik                                   #
  # ---------------------------------------------------------------------------- #
  traefik:
    image: "traefik:v2.6"
    container_name: "traefik"
    command:
    - "--api.dashboard=true"
    - "--api.insecure=true"
    - "--providers.docker=true"
    - "--entrypoints.web.address=:80"
    - "--providers.docker.exposedbydefault=true"
    - --providers.docker.defaultrule=HostHeader(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
    # - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
    # - --entrypoints.websecure.http.tls.certresolver=cloudflare
    # - --certificatesresolvers.cloudflare.acme.dnschallenge=true
    # - --certificatesresolvers.cloudflare.acme.email=${CF_API_EMAIL}
    # - --certificatesresolvers.cloudflare.acme.storage=acme.json
    # - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare

    - "--providers.file.directory=/FileProvider/"
    - "--providers.file.watch=true"
    - "--entrypoints.web-secure.address=:443"
    - "--serverstransport.insecureskipverify=true"
    - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
    - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
    - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
    # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    - "--certificatesresolvers.certificato.acme.email=${CF_API_EMAIL}"
    - "--certificatesresolvers.certificato.acme.storage=acme.json"



    # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    # - "--certificatesresolvers.myresolver.acme.email=hannes@birgersson.dev"
    # - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    - "--pilot.token=$PILOT_TOKEN"

    # - "--providers.docker.exposedbydefault=false"
    environment:
      CF_API_EMAIL: ${CF_API_EMAIL}
      CF_API_KEY: ${CF_API_KEY}
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_API_KEY: ${CF_API_KEY}
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./traefik/acme.json:/acme.json"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - /volume1/docker/traefik/FileProvider/:/FileProvider/
    # networks:
    #   - socket_proxy
    #   - proxy
    #   - apps
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.${DOMAINNAME}`)"
      - "traefik.http.routers.api.entrypoints=web-secure"
      - "traefik.http.routers.api.tls.certresolver=certificato"
      - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAINNAME}"
      - "traefik.http.routers.api.service=api@internal"
    #   # - "traefik.http.routers.traefik-rtr.rule=HostHeader(`traefik.$DOMAINNAME`)"
    #   - "traefik.http.routers.traefik.service=api@internal"
    #   - "traefik.http.routers.traefik.entrypoints=web"

  # ---------------------------------------------------------------------------- #
  #                                     Nginx                                    #
  # ---------------------------------------------------------------------------- #
  # nginx:
  #   image: nginx
  #   volumes:
  #   - ./nginx/templates:/etc/nginx/templates
  #   ports:
  #   - "8081:80"
  #   environment:
  #   - NGINX_HOST=pi
  #   - NGINX_PORT=80

  # openvpn-client

  # wireguard


# # --------------------------------- Networks --------------------------------- #
# networks:
# #   node-red-net:
#   proxy:
#     external:
#       name: proxy
  # socket_proxy:
  #   external:
  #     name: socket_proxy
  # apps:
  #   external:
  #     name: apps
  # default:
  #   driver: bridge
  # lan:
  #   external: true
  # backend:
  #   ipam:
  #     config:
  #       - subnet: 172.31.0.0/16

