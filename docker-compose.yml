version: '3.7'
services:
  # ---------------------------------------------------------------------------- #
  #                                   Node-Red                                   #
  # ---------------------------------------------------------------------------- #
  node-red:
    container_name: nodered
    image: nodered/node-red:latest
    environment:
      - TZ=Europe/Stockholm
    ports:
      - "1880:1880"
    volumes:
      - ./node-red/data:/data
      - ./node-red/.ssh:/usr/src/node-red/.ssh # Need ssh keys here
    extra_hosts:
      host.docker.internal: host-gateway
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.nodered.rule: "Host(`nodered.${DOMAINNAME}`)"
      traefik.http.routers.nodered.entrypoints: "web"

  # ---------------------------------------------------------------------------- #
  #                                 Transmission                                 #
  # ---------------------------------------------------------------------------- #
  transmission:
    image: lscr.io/linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Stockholm
      - TRANSMISSION_WEB_HOME=/combustion-release/ #optional
      - VIRTUAL_HOST=transmission.local
      - VIRTUAL_PORT=9091
      # - WHITELIST=iplist #optional
      # - PEERPORT=peerport #optional
      # - HOST_WHITELIST=dnsnane list #optional
    volumes:
      - ./transmission/config:/config
      - /mnt/usb/Torrents:/downloads
      - /mnt/usb/Server/Watch:/watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.transmission.rule: "Host(`transmission.${DOMAINNAME}`)"
      traefik.http.routers.transmission.entrypoints: "web"

  # ---------------------------------------------------------------------------- #
  #                                  Homebridge                                  #
  # ---------------------------------------------------------------------------- #
  # homebridge:
  #   container_name: homebridge
  #   image: oznu/homebridge:ubuntu
  #   restart: always
  #   network_mode: host # Port: 8581
  #   environment:
  #     - PGID=1000
  #     - PUID=1000
  #     - HOMEBRIDGE_CONFIG_UI=1
  #     - HOMEBRIDGE_CONFIG_UI_PORT=8581
  #     - TZ=Europe/Stockholm
  #   volumes:
  #     - ./homebridge/volumes/homebridge:/homebridge

  # ---------------------------------------------------------------------------- #
  #                                    Pi-Hole                                   #
  # ---------------------------------------------------------------------------- #
  unbound:
    container_name: unbound
    image: klutchell/unbound
    # command:
    #   - --health-cmd "dig sigok.verteiltesysteme.net @127.0.0.1"
    # healthcheck:
    #   test: dig sigok.verteiltesysteme.net @127.0.0.1 +dnssec | grep NOERROR
    # ports:
    # - 53/tcp
    # - 53/udp
    restart: unless-stopped
    # volumes:
    #   - ./unbound/config:/etc/unbound/config
    networks:
      pihole_net:
        ipv4_address: 10.0.0.2

  pihole:
    container_name: pihole
    # depends_on: [unbound]
    image: pihole/pihole:latest
    # links:
    # - unbound
    dns: 127.0.0.1:5053
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "81:80/tcp"
    environment:
      TZ: 'Europe/Stockholm'
      # Unbound IP
      DNS1: 10.0.0.2#53
      # If we don't specify two, it will auto pick google.
      DNS2: 10.0.0.2#53
      IPv6: "no"
      PROXY_LOCATION: pihole
    #   DNSMASQ_LISTENING: all
    #   # WEBPASSWORD: 'set a secure password here or it will be random'
    # dns:
    # - 127.0.0.1
    # - 10.0.2.10:54 # Points to unbound
    volumes:
      - './pi-hole/etc-pihole:/etc/pihole'
      - './pi-hole/etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN
    restart: unless-stopped # Recommended but not required (DHCP needs NET_ADMIN)
    networks:
      pihole_net:
        ipv4_address: 10.0.0.3
    labels:
      traefik.enable: "true"
      traefik.http.routers.pihole.rule: "Host(`pihole.${DOMAINNAME}`)"
      traefik.http.routers.pihole.entrypoints: "web"
      # traefik.http.routers.pihole.tls: "true"
      # traefik.http.routers.pihole.tls.certresolver: "certificato"
      # traefik.http.routers.pihole.tls.domains[0].main: "pihole.${DOMAINNAME}"
      # traefik.http.routers.pihole.service: "pihole"
      # traefik.http.services.pihole.loadBalancer.server.port: "81"

  # ---------------------------------------------------------------------------- #
  #                                     Plex                                     #
  # ---------------------------------------------------------------------------- #
  plex:
    image: lscr.io/linuxserver/plex
    container_name: plex
    # network_mode: host # Port: 32400
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
      - PLEX_CLAIM=claim-FqELS3T4w6ay8BBsMR8H #optional
      - ADVERTISE_IP="http://${SERVER_IP}:32400"
      - HOSTNAME=PlexServer
    volumes:
      - ./plex/config:/config
      - /mnt/usb/Server/Music:/music
      - /mnt/usb/Server/TV series:/tv
      - /mnt/usb/Server/Movies:/movies
      - /mnt/usb/Server/Audiobooks:/audiobooks
      - /mnt/usb/Server/Other:/other
      - /mnt/usb/Torrents/complete:/new_dl
    ports:
      - 32400:32400
      - 1900:1900/udp
      - 3005:3005
      - 5353/udp
      - 8324:8324
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
      - 32469:32469
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.plex.rule: "Host(`plex.${DOMAINNAME}`)"
      traefik.http.routers.plex.entrypoints: "web"
      traefik.http.services.plex.loadbalancer.server.port: 32400



  # ---------------------------------------------------------------------------- #
  #                               Hello (http test)                              #
  # ---------------------------------------------------------------------------- #
  hello:
    image: nginxdemos/hello
    container_name: hello
    # ports:
    #   - "8081:80"
    labels:
      traefik.enable: "true"
      traefik.http.routers.hello.rule: "Host(`hello.${DOMAINNAME}`)"
      traefik.http.routers.hello.entrypoints: "web"
    # - "traefik.http.routers.hello.entrypoints=web"
    # - "traefik.http.routers.hello.rule=Host(`hello.$DOMAINNAME`)"



  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    container_name: "whoami"
    labels:
      traefik.enable: "true"
      traefik.http.routers.whoami.rule: "Host(`whoami.${DOMAINNAME}`)"
      traefik.http.routers.whoami.entrypoints: "web"
    # - 'traefik.enable=true'
    # - 'traefik.http.routers.whoami.rule=Host(`whoami.${DOMAINNAME}`)'
    # - 'traefik.http.routers.whoami.entrypoints=web-secure'
    # - 'traefik.http.routers.whoami.tls=true'
    # - "traefik.http.routers.whoami.tls.certresolver=certificato"
    # - "traefik.http.routers.whoami.tls.domains[0].main=*.${DOMAINNAME}"
    # - "traefik.http.services.whoami.loadBalancer.server.port=80"

      # traefik.http.routers.whoami.tls.certresolver: "certificato"
      # traefik.http.routers.whoami.tls.domains[0].main: "whoami.${DOMAINNAME}"
      # traefik.http.routers.whoami.tls: "true"


  # ---------------------------------------------------------------------------- #
  #                                    Traefik                                   #
  # ---------------------------------------------------------------------------- #
  traefik:
    image: "traefik:v2.6"
    container_name: "traefik"
    command:
    - "--api.dashboard=true"
    - "--api.insecure=true"
    - "--providers.docker=true"

    - "--entrypoints.web.address=:80"
    - "--providers.docker.exposedbydefault=false"
    # - --providers.docker.defaultrule=HostHeader(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)


    # - "--providers.file.directory=/FileProvider/"
    # - "--providers.file.watch=true"
    # - "--entrypoints.web-secure.address=:443"
    # - "--serverstransport.insecureskipverify=true"

    # -------------------------------- Cloudflare -------------------------------- #
    # - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
    # - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
    # - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
    # # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    # - "--certificatesresolvers.certificato.acme.email=${CF_API_EMAIL}"
    # # - "--certificatesresolvers.certificato.acme.storage=acme.json"
    # - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"


    # ------------------------------------ TLS ----------------------------------- #
    # - "--certificatesresolvers.certificato.acme.tlschallenge=true"
    # # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    # - "--certificatesresolvers.certificato.acme.email=${CF_API_EMAIL}"
    # # - "--certificatesresolvers.certificato.acme.storage=acme.json"
    # - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"

    # ---------------------------------------------------------------------------- #

    # - "--entrypoints.dnsovertls.address=:853"
    # - "--entrypoints.dns.address=:53"


    - "--pilot.token=$PILOT_TOKEN"

    # environment:
      # CF_API_EMAIL: ${CF_API_EMAIL}
      # CF_API_KEY: ${CF_API_KEY}
      # CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      # CLOUDFLARE_API_KEY: ${CF_API_KEY}
    ports:
      - "80:80"
      # - "443:443"
      - "8080:8080"
    volumes:
      # - "./traefik/acme.json:/acme.json"
      # - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # - /volume1/docker/traefik/FileProvider/:/FileProvider/
    # networks:
    #   - socket_proxy
    #   - proxy
    #   - apps
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.rule: "Host(`traefik.${DOMAINNAME}`)"
      traefik.http.routers.traefik.service: "api@internal"
      # - "traefik.http.routers.api.entrypoints=web-secure"
      # - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAINNAME}"
      # - "traefik.http.routers.traefik-rtr.rule=HostHeader(`traefik.$DOMAINNAME`)"
      # - "traefik.http.routers.traefik.service=api@internal"
      # - "traefik.http.routers.traefik.entrypoints=web"

  # ---------------------------------------------------------------------------- #
  #                                   Wireguard                                  #
  # ---------------------------------------------------------------------------- #
  wireguard:
    image: linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Stockholm
      # - SERVERURL=wireguard.domain.com #optional
      - SERVERPORT=51820 #optional
      - PEERS=1 #optional
      - PEERDNS=auto #optional
      # - INTERNAL_SUBNET=10.13.13.0 #optional
    volumes:
      - ./wireguard/config:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

  # openvpn-client

  # wireguard

# # --------------------------------- Networks --------------------------------- #
networks:
  pihole_net:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/29
# networks:
# #   node-red-net:
#   proxy:
#     external:
#       name: proxy
  # socket_proxy:
  #   external:
  #     name: socket_proxy
  # apps:
  #   external:
  #     name: apps
  # default:
  #   driver: bridge
  # lan:
  #   external: true
  # backend:
  #   ipam:
  #     config:
  #       - subnet: 172.31.0.0/16

